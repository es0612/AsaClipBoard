name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  DEVELOPER_DIR: /Applications/Xcode.app/Contents/Developer

jobs:
  test:
    name: Test Suite
    runs-on: macos-latest
    strategy:
      matrix:
        xcode-version: ['15.1', '15.0']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Select Xcode version
      run: sudo xcode-select -s /Applications/Xcode_${{ matrix.xcode-version }}.app/Contents/Developer
    
    - name: Cache Swift packages
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/org.swift.swiftpm/
          .build/
        key: ${{ runner.os }}-spm-${{ hashFiles('**/Package.resolved') }}
        restore-keys: |
          ${{ runner.os }}-spm-
    
    - name: Swift version
      run: swift --version
    
    - name: Test ClipboardCore
      run: |
        cd ClipboardCore
        swift test --parallel
    
    - name: Test ClipboardSecurity
      run: |
        cd ClipboardSecurity  
        swift test --parallel
    
    - name: Test ClipboardUI
      run: |
        cd ClipboardUI
        swift test --parallel
    
    - name: Test IntegrationTests
      run: |
        cd IntegrationTests
        swift test --parallel

  build:
    name: Build App
    runs-on: macos-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Select Xcode version
      run: sudo xcode-select -s /Applications/Xcode_15.1.app/Contents/Developer
    
    - name: Cache derived data
      uses: actions/cache@v3
      with:
        path: ~/Library/Developer/Xcode/DerivedData
        key: ${{ runner.os }}-derived-data-${{ hashFiles('**/*.pbxproj') }}
        restore-keys: |
          ${{ runner.os }}-derived-data-
    
    - name: Build AsaClipBoard
      run: |
        xcodebuild -project AsaClipBoard.xcodeproj \
                   -scheme AsaClipBoard \
                   -destination 'platform=macOS' \
                   -configuration Release \
                   build \
                   CODE_SIGNING_ALLOWED=NO

  lint:
    name: Code Quality
    runs-on: macos-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install SwiftLint
      run: |
        brew install swiftlint
    
    - name: SwiftLint
      run: |
        swiftlint --strict --reporter github-actions-logging
    
    - name: Check Swift format (if swiftformat config exists)
      run: |
        if [ -f .swiftformat ]; then
          brew install swiftformat
          swiftformat --lint .
        else
          echo "No .swiftformat config found, skipping format check"
        fi

  security:
    name: Security Scan
    runs-on: macos-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: GitGuardian scan
      uses: GitGuardian/ggshield-action@v1.25.0
      env:
        GITHUB_PUSH_BEFORE_SHA: ${{ github.event.before }}
        GITHUB_PUSH_BASE_SHA: ${{ github.event.base }}
        GITHUB_PULL_BASE_SHA: ${{ github.event.pull_request.base.sha }}
        GITHUB_DEFAULT_BRANCH: ${{ github.event.repository.default_branch }}
        GITGUARDIAN_API_KEY: ${{ secrets.GITGUARDIAN_API_KEY }}

  coverage:
    name: Code Coverage
    runs-on: macos-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Generate coverage report
      run: |
        # Run tests with coverage for all packages
        cd ClipboardCore && swift test --enable-code-coverage
        cd ../ClipboardSecurity && swift test --enable-code-coverage  
        cd ../ClipboardUI && swift test --enable-code-coverage
        cd ../IntegrationTests && swift test --enable-code-coverage
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: .build/debug/codecov/*.json
        fail_ci_if_error: false

  notify:
    name: Notifications
    runs-on: macos-latest
    needs: [test, build, lint, security]
    if: always()
    
    steps:
    - name: Notify success
      if: ${{ needs.test.result == 'success' && needs.build.result == 'success' && needs.lint.result == 'success' }}
      run: |
        echo "✅ All CI checks passed successfully!"
        echo "Tests: ${{ needs.test.result }}"
        echo "Build: ${{ needs.build.result }}" 
        echo "Lint: ${{ needs.lint.result }}"
        echo "Security: ${{ needs.security.result }}"
    
    - name: Notify failure
      if: ${{ needs.test.result == 'failure' || needs.build.result == 'failure' || needs.lint.result == 'failure' }}
      run: |
        echo "❌ CI checks failed!"
        echo "Tests: ${{ needs.test.result }}"
        echo "Build: ${{ needs.build.result }}"
        echo "Lint: ${{ needs.lint.result }}"
        echo "Security: ${{ needs.security.result }}"
        exit 1